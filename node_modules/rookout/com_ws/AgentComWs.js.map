{"version":3,"sources":["../../../src/com_ws/AgentComWs.js"],"names":["config","require","messages_pb","envelope_pb","timestamp_pb","any_pb","MessageCallback","constructor","cb","persistent","AgentComWs","id","agentHost","agentPort","proxy","token","labels","tags","debug","host","includes","port","_lastSuccessfulConnection","_callbacks","_callbacks_called_status","_connected","_currentBackoff","AgentComConfiguration","BACK_OFF","_retry","_stopping","_connection","_reconnectPromise","_pendingMessages","_currentlySendingMessagesUntilQueueIsEmpty","_lambdaKeepAliveInterval","setInterval","unref","_connecting","_lastSuccessfulPing","_connectionEstablishedCallbacks","_pingTimeout","_pingInterval","_connectionErrorOccured","_reconnecting","close","terminate","closeConnection","onConnectionEstablished","push","waitForReconnect","Promise","resolve","ensureConnected","timeout","connectedPromise","Date","now","WS_PING_TIMEOUT","clearTimeout","race","timeoutRejecter","flushMessages","catch","obj","resolveWhenReady","sendQueuedMessages","isConnected","startSendingMessagesUntilQueueIsEmpty","pendingMessage","shift","undefined","send","then","addEnvelope","getTypeName","command","k","Object","keys","proto","com","rookout","ToolException","add","message","envelope","wrapInEnvelope","error","validateEnvelopeForQueue","addEnvelopeAndStartSending","length","MAX_QUEUED_MESSAGES","MAX_MESSAGE_LENGTH","RookMessageSizeExceeded","on","message_name","callback","_registerCallback","once","waitForReceivedMessage","messageName","_resetMessageCallbackCalledStatus","_waitForCallbackStatusActivation","_timeout","WAIT_MESSAGE_CHECK_INTERVAL","ms","setTimeout","awaitMessage","hasOwnProperty","reject","RookCommunicationException","flushMessageCallbacks","callbacks","forEach","err","logger","_connectToAgentNoTimeout","startNewConnection","registerAgent","statusCode","RookInvalidToken","RookError","connectToAgent","connectAndRegister","info","information","collect","agent_id","m","NewAgentMessage","setAgentInfo","pack_agent_info","notifyLambdaInactive","notifyLambdaActive","ref","Envelope","time","date","Timestamp","fromDate","setTimestamp","any","Any","pack","serializeBinary","setMsg","rookErr","binary","RookSendFailedError","RookNotConnectedError","handleIncomingMessage","msg","deserializeBinary","typeName","getMsg","partialTypeName","slice","type","getValue","remaining_callbacks","buildProxy","startsWith","initiateConnection","ws","WebSocket","headers","VersionConfiguration","VERSION","COMMIT","agent","setPingConnectionTimeout","e","setPingInterval","interval","ping","reconnect","clearInterval","RESET_BACKOFF_TIMEOUT","Math","min","MAX_SLEEP","heartbeat","PING_TIMEOUT","setResponseListeners","connectionResolve","connectionReject","_socket","reason","req","resp","CONNECT_TIMEOUT","PING_INTERVAL"],"mappings":"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","sourcesContent":["\"use strict\";\n\nimport WebSocket from 'ws';\nimport HttpsProxyAgent from 'https-proxy-agent';\n\nimport {logger} from '../logger';\n\nimport * as information from \"./information\";\nimport {\n    RookCommunicationException,\n    RookInvalidToken,\n    ToolException,\n    RookSendFailedError,\n    RookNotConnectedError,\n    RookMessageSizeExceeded\n} from '../exceptions'\nimport RookError from \"../processor/RookError\";\n\nconst config = require(\"../config\");\nconst messages_pb = require(\"../protobuf/messages_pb\");\nconst envelope_pb = require(\"../protobuf/envelope_pb\");\nconst timestamp_pb = require(\"google-protobuf/google/protobuf/timestamp_pb\");\nconst any_pb = require(\"google-protobuf/google/protobuf/any_pb\");\n\nclass MessageCallback {\n    constructor(cb, persistent) {\n        this.cb = cb;\n        this.persistent = persistent;\n    }\n}\n\nexport default class AgentComWs {\n\n    constructor(id, agentHost, agentPort, proxy=null, token=null, labels=null, tags=null, debug=false) {\n        this.id = id;\n        this.host = agentHost.includes('://') ? agentHost : 'ws://' + agentHost;\n        this.port = agentPort;\n        this.proxy = proxy;\n        this.labels = labels || {};\n        this.tags = tags || [];\n        this.token = token || '';\n        this.debug = debug;\n        this._lastSuccessfulConnection = 0;\n\n        this._callbacks = {};\n        this._callbacks_called_status = {};\n        this._connected = false;\n        this._currentBackoff = config.AgentComConfiguration.BACK_OFF;\n        this._retry = 0;\n        this._stopping = false;\n        this._connection = null;\n        this._reconnectPromise = null;\n        this._pendingMessages = [];\n        this._currentlySendingMessagesUntilQueueIsEmpty = false;\n        // Used to keep lambdas alive before we're finished.\n        // Normally you would use the socket, but we might want to keep running when the socket doesn't exist\n        // (e.g. after disconnection followed by a flush at the end of lambda execution)\n        this._lambdaKeepAliveInterval = setInterval(() => { if (1) {}}, 60000).unref();\n        this._connecting = false;\n        this._lastSuccessfulPing = 0;\n        this._connectionEstablishedCallbacks = []; // Used by waitForReconnect - don't use with anything else\n        this._pingTimeout = null;\n        this._pingInterval = null;\n        this._connectionErrorOccured = false;\n        this._reconnecting = false;\n    }\n\n    close() {\n        this._stopping = true;\n\n        if (this._connection) {\n            this._connection.terminate();\n            this._connection = null;\n        }\n\n        this._connected = false;\n    }\n\n    closeConnection() {\n        if (this._connection) {\n            this._connection.terminate();\n            this._connection = null;\n        }\n    }\n\n    onConnectionEstablished(cb) {\n        this._connectionEstablishedCallbacks.push(() => cb());\n    }\n\n    waitForReconnect() {\n        if (this._reconnectPromise) {\n            return this._reconnectPromise;\n        }\n        this._reconnectPromise = new Promise(resolve => {\n            this.onConnectionEstablished(() => {\n                this._reconnectPromise = null;\n                resolve();\n            });\n        });\n\n        return this._reconnectPromise;\n    }\n\n    ensureConnected(timeout=30000) {\n        let connectedPromise = Promise.resolve();\n\n        if (this._connecting) {\n            connectedPromise = this.waitForReconnect();\n        } else {\n            if (Date.now() - this._lastSuccessfulPing > config.AgentComConfiguration.WS_PING_TIMEOUT * 1000) {\n                if (this._connection) {\n                    // The timeout could run after we terminate the connection, and terminate our reconnect.\n                    if (this._pingTimeout) {\n                        clearTimeout(this._pingTimeout);\n                        this._pingTimeout = null;\n                    }\n                    this._connection.terminate();\n                    this._connection = null;\n                }\n\n                connectedPromise = this.waitForReconnect();\n            }\n        }\n\n        return Promise.race([connectedPromise, this.timeoutRejecter(timeout)]);\n    }\n\n    flushMessages() {\n        // Returns a promise that is resolved or rejected once all messages up to this point have been\n        // sent or failed to send.\n\n        this.ensureConnected().catch(() => {\n        });\n\n        return new Promise((resolve) => {\n            let obj = {resolveWhenReady: resolve};\n            this._pendingMessages.push(obj);\n            this.sendQueuedMessages();\n        });\n    }\n\n    sendQueuedMessages() {\n        if (!this._currentlySendingMessagesUntilQueueIsEmpty && this.isConnected()) {\n            this._currentlySendingMessagesUntilQueueIsEmpty = true;\n            this.startSendingMessagesUntilQueueIsEmpty();\n        }\n    }\n\n    startSendingMessagesUntilQueueIsEmpty() {\n        // Sends all messages in queue until it's empty, if send function returns an error the function stops and pushes the message into the queue.\n\n        let pendingMessage = this._pendingMessages.shift();\n        if (pendingMessage === undefined) {\n            this._currentlySendingMessagesUntilQueueIsEmpty = false;\n            return;\n        }\n\n        if (pendingMessage.resolveWhenReady !== undefined) {\n            pendingMessage.resolveWhenReady();\n            return this.startSendingMessagesUntilQueueIsEmpty();\n        }\n\n        this.send(pendingMessage)\n            .then(() => this.startSendingMessagesUntilQueueIsEmpty())\n            .catch(() => {\n                this.addEnvelope(pendingMessage);\n                this._currentlySendingMessagesUntilQueueIsEmpty = false;\n            });\n    }\n\n    static getTypeName(command) {\n        for (let k of Object.keys(proto.com.rookout)) {\n            if (proto.com.rookout[k] === command.constructor) {\n                return \"com.rookout.\" + k;\n            }\n        }\n\n        throw new ToolException();\n    }\n\n    // DON'T LOG HERE - THIS FUNCTION IS INDIRECTLY CALLED FROM WITHIN THE LOGGER\n    // LOGGING HERE LEADS TO INFINITE RECURSION\n    add(message) {\n        // gets a message, wraps it in envelope, validates it and pushes it to queue.\n        // if the validation has not passed the validation status is returned before pushing to the queue.\n\n        const envelope = AgentComWs.wrapInEnvelope(message);\n\n        const error = this.validateEnvelopeForQueue(envelope);\n        if (error) {\n            return error;\n        }\n\n        this.addEnvelopeAndStartSending(envelope);\n    }\n\n    // DON'T LOG HERE - THIS FUNCTION IS INDIRECTLY CALLED FROM WITHIN THE LOGGER\n    // LOGGING HERE LEADS TO INFINITE RECURSION\n    addEnvelope(envelope) {\n        if (this._pendingMessages.length >= config.AgentComConfiguration.MAX_QUEUED_MESSAGES) {\n            return;\n        }\n\n        this._pendingMessages.push(envelope);\n    }\n\n    // DON'T LOG HERE - THIS FUNCTION IS INDIRECTLY CALLED FROM WITHIN THE LOGGER\n    // LOGGING HERE LEADS TO INFINITE RECURSION\n    addEnvelopeAndStartSending(envelope) {\n        this.addEnvelope(envelope)\n        this.sendQueuedMessages();\n    }\n\n    validateEnvelopeForQueue(envelope) {\n        // Validates the given envelope by the queue standards and return an error if it doesn't meet them\n        if (envelope.length > config.AgentComConfiguration.MAX_MESSAGE_LENGTH) {\n            return new RookMessageSizeExceeded(envelope.length, config.AgentComConfiguration.MAX_MESSAGE_LENGTH);\n        }\n\n        return null;\n    }\n\n    on(message_name, callback) {\n        this._registerCallback(message_name, new MessageCallback(callback, true))\n    }\n\n    once(message_name, callback) {\n        this._registerCallback(message_name, new MessageCallback(callback, false))\n    }\n\n    waitForReceivedMessage(messageName) {\n        this._resetMessageCallbackCalledStatus();\n        this._waitForCallbackStatusActivation(messageName);\n    }\n\n    async _waitForCallbackStatusActivation(messageName) {\n        while (this._callbacks_called_status[messageName] !== 1) {\n            await this._timeout(config.AgentComConfiguration.WAIT_MESSAGE_CHECK_INTERVAL);\n        }\n    }\n\n    _timeout(ms) {\n        return new Promise(resolve => setTimeout(resolve, ms).unref());\n    }\n\n    awaitMessage(message_name) {\n        return new Promise(resolve => {\n            this.once(message_name, resolve);\n        })\n    }\n\n    _registerCallback(messageName, callback) {\n        if (!(this._callbacks.hasOwnProperty(messageName))) {\n            this._callbacks[messageName] = [];\n        }\n        this._callbacks_called_status[messageName] = 0;\n        this._callbacks[messageName].push(callback);\n    }\n\n    timeoutRejecter(timeout) {\n        return new Promise((resolve, reject) => {\n            setTimeout(() => {\n                if (!this._connection) {\n                    reject(new RookCommunicationException());\n                }\n                resolve();\n            }, timeout).unref();\n        })\n    }\n\n    isConnected() {\n        return this._connected;\n    }\n\n    flushMessageCallbacks(message_name) {\n        const callbacks = this._callbacks[message_name];\n\n        if (callbacks !== undefined) {\n\n            callbacks.forEach((callback) => {\n                try {\n                    callback.cb();\n                } catch (err) {\n                    logger.debug(`Silenced error from callback: ${err}`)\n                }\n            })\n        }\n    }\n\n    async _connectToAgentNoTimeout() {\n        try {\n            await this.startNewConnection();\n            await this.registerAgent();\n            const callbacks = this._connectionEstablishedCallbacks;\n            this._connectionEstablishedCallbacks = [];\n            for (const cb of callbacks) {\n                cb();\n            }\n            this.sendQueuedMessages();\n\n            return true;\n        } catch (err) {\n            if (err.hasOwnProperty(\"statusCode\")) {\n                if (err.statusCode === 403) {\n                    throw new RookInvalidToken(this.token);\n                }\n                throw new RookError(err, `Got unexpected response from server with status code: ${err.statusCode}`);\n            } else {\n                throw err;\n            }\n        }\n    }\n\n    async connectToAgent(timeout) {\n        let connectAndRegister = this._connectToAgentNoTimeout();\n\n        if (!timeout) {\n            return connectAndRegister;\n        }\n\n        return Promise.race([connectAndRegister, this.timeoutRejecter(timeout)]);\n    }\n\n    async registerAgent() {\n        let info = await information.collect(this.debug);\n        info.agent_id = this.id;\n        info.labels = this.labels;\n        if (this.tags !== undefined) {\n            info.tags = this.tags;\n        }\n\n        let m = new messages_pb.NewAgentMessage();\n        m.setAgentInfo(information.pack_agent_info(info));\n\n        await this.send(AgentComWs.wrapInEnvelope(m));\n        this._lastSuccessfulConnection = Date.now();\n        await this.waitForReceivedMessage(\"InitialAugsCommand\");\n        this._connected = true;\n\n        logger.info(\"Finished initialization\");\n    }\n\n    notifyLambdaInactive() {\n        this._lambdaKeepAliveInterval.unref();\n    }\n\n    notifyLambdaActive() {\n        this._lambdaKeepAliveInterval.ref();\n    }\n\n    static wrapInEnvelope(message) {\n        let envelope = new envelope_pb.Envelope();\n        const time = new Date();\n        let date = new timestamp_pb.Timestamp();\n        date.fromDate(time);\n        envelope.setTimestamp(date);\n        let any = new any_pb.Any();\n        any.pack(message.serializeBinary(), AgentComWs.getTypeName(message));\n        envelope.setMsg(any);\n        return envelope.serializeBinary();\n    }\n\n    // DON'T LOG HERE - THIS FUNCTION IS INDIRECTLY CALLED FROM WITHIN THE LOGGER\n    // LOGGING HERE LEADS TO INFINITE RECURSION\n    send(message) {\n        return new Promise((resolve, reject) => {\n            let rookErr = null;\n            if (this._connection) {\n                this._connection.send(message, {binary: true}, (err) => {\n                    if (err) {\n                        rookErr = new RookSendFailedError();\n                    } else {\n                        resolve(); // send was successful\n                    }\n                })\n            } else {\n                rookErr = new RookNotConnectedError();\n            }\n            if (rookErr !== null) {\n                reject(rookErr);\n            } else {\n                resolve();\n            }\n        });\n    }\n\n    handleIncomingMessage(msg) {\n        let envelope = envelope_pb.Envelope.deserializeBinary(msg);\n        let typeName = envelope.getMsg().getTypeName();\n\n\n        const partialTypeName = typeName.slice(\"com.rookout.\".length);\n        let type = proto.com.rookout[partialTypeName];\n        let message = type.deserializeBinary(envelope.getMsg().getValue());\n\n        const callbacks = this._callbacks[partialTypeName];\n\n        if (callbacks !== undefined) {\n            let remaining_callbacks = [];\n\n            callbacks.forEach((callback) => {\n               try {\n                   callback.cb(message)\n               } catch (err) {\n                   logger.debug(`Silenced error from callback: ${err}`)\n               } finally {\n                   if (callback.persistent) {\n                       remaining_callbacks.push(callback)\n                   }\n               }\n\n            });\n            this._callbacks_called_status[partialTypeName] = 1;\n            this._callbacks[partialTypeName] = remaining_callbacks\n        }\n    }\n\n    _resetMessageCallbackCalledStatus(messageName) {\n        this._callbacks_called_status[messageName] = 0;\n    }\n\n    buildProxy() {\n        if (this.proxy === null) {\n            return false;\n        }\n\n        logger.debug(\"Connecting via proxy: %s\", this.proxy);\n\n        if (this.proxy.startsWith(\"http\")) {\n            return HttpsProxyAgent(this.proxy);\n        } else {\n            return HttpsProxyAgent(\"http://\" + this.proxy);\n        }\n    }\n\n    initiateConnection() {\n        this.closeConnection();\n        let proxy = this.buildProxy();\n        let ws = new WebSocket(`${this.host}:${this.port}/v1`,  {\n            headers:  {\n                \"User-Agent\": `RookoutAgent/${config.VersionConfiguration.VERSION}+${config.VersionConfiguration.COMMIT}`,\n                \"X-Rookout-Token\": this.token\n            },\n            agent: proxy,\n        });\n\n        this._connection = ws;\n        return ws;\n    }\n\n    setPingConnectionTimeout(timeout) {\n        this._pingTimeout = setTimeout(() => {\n            logger.error(\"WS connect timeout, closing connection\");\n            try {\n                if (this._connection) {\n                    this._connection.terminate();\n                    this._connection = null;\n                }\n            } catch (e) {}\n        }, timeout * 1000);\n        this._pingTimeout.unref();\n\n    }\n\n    setPingInterval(interval) {\n        this._pingInterval = setInterval(() => {\n            if (this._connection) {\n                this._connection.ping(() => {\n                });\n            }\n        }, interval * 1000);\n        this._pingInterval.unref();\n    }\n\n    async reconnect() {\n        if (this._stopping) {\n            return;\n        }\n\n        if (this._pingTimeout) {\n            clearTimeout(this._pingTimeout);\n        }\n\n        if (this._pingInterval) {\n            clearInterval(this._pingInterval);\n        }\n\n        // already reconnecting\n        if (this._reconnecting) {\n            return;\n        }\n\n        this._reconnecting = true;\n\n        if (this._connected && Date.now() >= this._lastSuccessfulConnection + config.AgentComConfiguration.RESET_BACKOFF_TIMEOUT) {\n            this._retry = 0;\n            this._currentBackoff = config.AgentComConfiguration.BACK_OFF;\n        }\n\n        this._connected = false;\n\n        this._retry += 1;\n        this._currentBackoff = Math.min(this._currentBackoff * 2, config.AgentComConfiguration.MAX_SLEEP);\n\n        while (!this._connected) {\n            try {\n                await this.connectToAgent();\n                if (this._connected) {\n                    break;\n                }\n            }\n            catch (e) {\n                logger.info(\"Connection failed; reason = %s, retry = #%d, waiting %fs\", e, this._retry, this._currentBackoff);\n            }\n            await this._timeout(this._currentBackoff * 1000);\n            this._retry += 1;\n            this._currentBackoff = Math.min(this._currentBackoff * 2, config.AgentComConfiguration.MAX_SLEEP);\n\n        }\n        this._reconnecting = false;\n    }\n\n\n    heartbeat() {\n        this._lastSuccessfulPing = Date.now();\n        clearTimeout(this._pingTimeout);\n        this._pingTimeout = setTimeout(() => {\n            try {\n                if (this._connection) {\n                    this._connection.terminate();\n                    this._connection = null;\n                }\n            } catch (e) {}\n        }, config.AgentComConfiguration.PING_TIMEOUT * 1000);\n        this._pingTimeout.unref();\n    };\n\n    setResponseListeners(connectionResolve, connectionReject) {\n        // Heartbeat runs on every pong, as well as once on a new connection.\n        this._connectionErrorOccured = false;\n\n        this._connection.on(\"open\", () => {\n            logger.debug(\"Connection established\");\n            this.heartbeat();\n            this._connecting = false;\n            // The socket does not exist before this point except internally - we can't access it.\n            // Upon a connection timeout (currently 2 seconds), the socket will be terminated.\n            if (this._connection) {\n                this._connection._socket.unref();\n            }\n\n            connectionResolve(this._connection);\n        });\n        this._connection.on(\"pong\", () => this.heartbeat());\n        this._connection.on(\"close\", () => {\n            // in the case of an error, this callback is called as well as on(\"error\")\n            if (!this._connectionErrorOccured) {\n                let reason = 'Connection closed';\n                this._connecting = false;\n                this.reconnect().then();\n                connectionReject(reason);\n            }\n            // intentionally no reject here - the error is handled by reconnect\n        });\n\n        this._connection.on(\"message\", msg => this.handleIncomingMessage(msg)); // Connection errors (e.g. abrupt termination)\n\n        // Connection errors (e.g. abrupt termination)\n        this._connection.on(\"error\", err => {\n            this._connecting = false;\n            this._connectionErrorOccured = true;\n            this.reconnect().then();\n            connectionReject(err);\n            // intentionally no reject here - the error is handled by reconnect\n        });\n\n        // Unexpected HTTP responses\n        this._connection.on(\"unexpected-response\", (req, resp) => {\n            connectionReject({\n                statusCode: resp.statusCode\n            });\n            this.reconnect().then();\n        });\n    }\n\n    startNewConnection() {\n        return new Promise((resolve, reject) => {\n            try {\n                // Initiate the connection.\n                this.initiateConnection();\n                this._connecting = true;\n                // Set connection timeout\n                this.setPingConnectionTimeout(config.AgentComConfiguration.CONNECT_TIMEOUT);\n                // Send pings every WS_PING_INTERVAL.\n                this.setPingInterval(config.AgentComConfiguration.PING_INTERVAL);\n                this.setResponseListeners(resolve, reject);\n\n            } catch (err) {\n                reject(err);\n            }\n        });\n    }\n\n}\n"],"file":"AgentComWs.js"}